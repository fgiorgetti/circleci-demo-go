version: 2.1 # use CircleCI 2.0
orbs:
    docker: circleci/docker@1.0.1
    go: circleci/go@1.7.2
    kube-orb: circleci/kubernetes@0.11.0
commands:
  podman-latest:
    description: "Install latest podman v4 or higher"
    steps:
      - run:
          name: install podman
          command: |
            sudo mkdir -p /etc/apt/keyrings
            curl -fsSL https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/unstable/xUbuntu_$(lsb_release -rs)/Release.key \
              | gpg --dearmor \
              | sudo tee /etc/apt/keyrings/devel_kubic_libcontainers_unstable.gpg > /dev/null
            echo \
              "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/devel_kubic_libcontainers_unstable.gpg]\
                https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/unstable/xUbuntu_$(lsb_release -rs)/ /" \
              | sudo tee /etc/apt/sources.list.d/devel:kubic:libcontainers:unstable.list > /dev/null
            sudo apt-get update -qq
            sudo apt-get -qq -y install podman
            podman version

            # Bypassing CircleCI issue with user session (see: https://github.com/containers/podman/issues/16529)
            mkdir -p ~/.config/containers/containers.conf.d
            ( echo '[containers]' ; echo 'cgroups = "disabled"' ) > ~/.config/containers/containers.conf.d/podman-issue-16529.conf
            #( echo '[engine]' ; echo 'cgroup_manager = "cgroupfs"' ) >> ~/.config/containers/containers.conf.d/podman-issue-16529.conf

            # Starting systemd user service
            systemctl --user start podman.socket
  verify-go:
    steps:
      - go/install:
          version: "1.19"
      - run:
          name: go version
          command: |
            go version
  go-junit:
    steps:
      - go/install:
          version: "1.19"
      - run:
          name: go junit reporter
          command: |
            go install github.com/jstemmer/go-junit-report@v1.0.0
  local-ips:
    steps:
      - run:
          name: "local ip addresses"
          command: |
            LOCAL_IP=$(ip addr show | grep inet\ | grep -vE 'lo$|docker' | awk '{print $2}' | awk -F '/' '{print $1}')
            echo "export LOCAL_IP=${LOCAL_IP}" >> ${BASH_ENV}
            [[ "${MY_ENV_VAR}" = "abcd" ]] && echo "Env var is correct" || echo "Invalid value"
  docker-registry:
    steps:
      - run:
          name: "create docker registry"
          command: |
            docker run --name registry -d -p 5000:5000 registry
  list-containers-job:
    steps:
      - run:
          name: "list docker containers"
          command: |
            set
            docker ps
            echo "Local IP = ${LOCAL_IP}"
  clone-skupper:
    steps:
      - run:
          name: "clone skupper repo"
          command: |
            git clone https://github.com/skupperproject/skupper
  generate-client:
    steps:
      - run:
          name: "generate skupper clients"
          command: |
            cd skupper && make generate-client build-cmd
  sleep:
    steps:
      - run:
          name: "sleeping 3600 seconds"
          command: |
            for ((i=0;i<3600;i++)); do
              echo -n "."
              sleep 1
            done
  system_monitor:
    description: shows continuous system state
    steps:
    - run:
        name: sar info
        command: sar -h -q -r -u 60
        background: true
    - run:
        name: vmstat info
        command: vmstat -w -t 10
        background: true
    - run:
        name: journalctl
        command: journalctl -p 7 -xb -f
        background: true
    - run:
        name: kubectl events
        command: kubectl get events -A -w
        background: true
  podman-system-tests:
    steps:
      - run:
          name: "run podman system tests"
          command: |
            cd skupper && go test -count=1 -v -tags=podman ./pkg/domain/podman/... -use-cluster
  podman-integ-tests:
    steps:
      - run:
          name: "run podman integration tests"
          command: |
            export SKUPPER_TEST_CLI_MAX_STATUS_ATTEMPTS=5
            export SKUPPER_TEST_SKIP_DEBUG=true
            cd skupper && sed -i 's#RouterLogging:       "trace"#RouterLogging:       "info"#g' ./test/integration/examples/custom/helloworld/helloworld_podman_test.go && make build-cmd && sudo install skupper /usr/local/bin && go test -count=1 -v -tags=podman,integration ./test/integration/examples/custom/helloworld -run TestHelloWorldCLIOnPodman | tee test-podman.out
            cat test-podman.out | go-junit-report > test-podman.xml
      - store_test_results:
          path: skupper
  minikube-install:
    description: Installs the minikube executable onto the system.
    steps:
      - run:
          command: >-
            curl -Lo minikube
            https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 &&
            chmod +x minikube && sudo
            mv minikube /usr/local/bin/
          name: Install Minikube Executable

  minikube-start-medium:
    description: Starts the minikube service, with 2 CPU and 2 GiB
    steps:
      - run:
          command: >-
            minikube start --vm-driver=docker --cpus 2 --memory 2048
          name: Start Minikube Cluster
  minikube-start-load-balancer:
    description: Starts the minikube tunnel
    steps:
      - run:
          command: minikube tunnel
          name: Start Minikube Tunnel
          background: true
  compile_go_program:
    description: Compile specified platform.
    parameters:
      platform:
        type: string
      goos:
        type: string
      goarch:
        type: string
      exesuffix:
        default: ""
        type: string
    steps:
      - run:
          name: Building << parameters.platform >>
          command: >-
            cd skupper;
            VERSION="${CIRCLE_TAG:-ci-${CIRCLE_BUILD_NUM}}";
            GOOS=<< parameters.goos >>
            GOARCH=<< parameters.goarch >>
            go build -ldflags "-X github.com/skupperproject/skupper/pkg/version.Version=${VERSION}"
            -o dist/<< parameters.platform >>/skupper<< parameters.exesuffix >>
            ./cmd/skupper

jobs: # basic units of work in a run
  skupper-podman-tests:
    description: "Run podman system tests for Skupper"
    executor: my-executor
    steps:
      - local-ips
      - docker-registry
      - list-containers-job
      - minikube-install
      - minikube-start-medium
      - minikube-start-load-balancer
      - podman-latest
      - kube-orb/install-kubectl
      - verify-go
      - go-junit
      - clone-skupper
      - generate-client
      - system_monitor
      - sleep
#      - podman-integ-tests
#      - podman-integ-tests
#      - podman-integ-tests
#      - podman-integ-tests
#      - podman-integ-tests
#      - podman-system-tests
  push-master-images:
    docker:
      - image: circleci/golang:1.19
    parallelism: 1
    steps:
      - run:
          name: Push master images
          command: |
            echo "CircleCI playground"
            ls -l 
            pwd
            echo "this must only be executed for master branch only"
  use-registry:
    description: "list docker containers"
    executor: my-executor
    steps:
      - attach_workspace:
          at: /tmp/
      - docker-registry
      - list-containers-job
      - run:
          command: |
            ls -ld /tmp/images
            ls -l /tmp/images
            cat /tmp/images/image.data
  release:
    description: "fake release"
    executor: my-executor
    steps:
      - run:
          command: echo "Creating a fake release"
            
  build-all:
    executor:
      name: go/default
      tag: "1.20"
    steps:
      - run: |
          git clone https://github.com/skupperproject/skupper
          cd skupper
          make generate-client

      - compile_go_program:
          goos: linux
          goarch: amd64
          platform: linux-amd64

      - compile_go_program:
          goos: linux
          goarch: "386"
          platform: linux-i386

      - compile_go_program:
          goos: windows
          goarch: "386"
          platform: windows-i386
          exesuffix: ".exe"

      - compile_go_program:
          goos: windows
          goarch: amd64
          platform: windows-amd64
          exesuffix: ".exe"

      - compile_go_program:
          goos: darwin
          goarch: amd64
          platform: mac-amd64

      - compile_go_program:
          goos: darwin
          goarch: arm64
          platform: mac-arm64

      - compile_go_program:
          goos: linux
          goarch: arm
          platform: linux-arm32

      - compile_go_program:
          goos: linux
          goarch: arm64
          platform: linux-arm64
      - persist_to_workspace:
          root: .
          paths:
            - skupper/dist

  test-skupper-binary:
    description: Run skupper command in a specific image
    parameters:
      image:
        type: string
    docker:
      - image: << parameters.image >>
    steps:
      - attach_workspace:
          at: .
      - run:
          name: "Run the skupper binary"
          command: |
            cd skupper
            cd dist/linux-amd64
            ./skupper version

  publish-github-main-images:
    executor:
      name: go/default
      tag: "1.20"
    steps:
      - run: |
          echo "Publishing main images (fake)"

  publish-github-main-artifacts:
    docker:
      - image: cibuilds/github:0.10
    steps:
      - attach_workspace:
          at: .
      - run:
          name: "Create a Pre-Release on GitHub"
          command: |
            cd skupper
            VERSION="main"
            BASEDIR=`pwd`
            mkdir "${BASEDIR}/archives"
            for p in `ls dist` ; do
              cd "$BASEDIR/dist/$p"
              if [[ $p == windows* ]] ; then
                zip -q "${BASEDIR}/archives/skupper-cli-${VERSION}-$p.zip" *
              else
                tar -zcf "${BASEDIR}/archives/skupper-cli-${VERSION}-$p.tgz" *
              fi
            done
            cd ${BASEDIR}
            ghr -t ${GH_CIRCLECI_DEMO_GO_TOKEN} -u fgiorgetti -r circleci-demo-go -c ${CIRCLE_SHA1} -replace -prerelease ${VERSION} "${BASEDIR}/archives"


anchors:
  branch_filters: &run_for_master_branch
    filters:
      branches:
        ignore: /.*/
        only: /master/

executors:
  my-executor:
    machine:
      image: ubuntu-2204:2022.10.2
    resource_class: medium

yaml-templates:
  branch_filters: &run_for_all_branches_and_numeric_tags
    filters:
      tags:
        only: /[0-9].*/

  main_branch_filters: &run_for_main_branch
    filters:
      branches:
        ignore: /.*/
        only: /master/

workflows:
  version: 2.1
#  nightly-release:
#    triggers:
#      - schedule:
#          cron: "52 14 * * *"
#          filters:
#            branches:
#              only:
#                - master
#    jobs:
#       - release
  build-workflow:
    jobs:
      - build-all:
          <<: *run_for_all_branches_and_numeric_tags
      - test-skupper-binary:
          <<: *run_for_all_branches_and_numeric_tags
          matrix:
            parameters:
              image:
#                - quay.io/centos/centos:stream8
                - quay.io/centos/centos:stream9
                - quay.io/fedora/fedora:38
                - quay.io/fedora/fedora:39
          requires:
            - build-all
      - publish-github-main-artifacts:
          <<: *run_for_main_branch
          requires:
            - publish-github-main-images
            - test-skupper-binary
            - build-all

      - publish-github-main-images:
          <<: *run_for_main_branch
          requires:
            - build-all
            - test-skupper-binary
          context:
            - test-fernando

